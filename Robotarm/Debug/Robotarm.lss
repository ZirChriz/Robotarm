
Robotarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000e70  00000f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800212  00800212  00000f16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d0  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0d  00000000  00000000  00003b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f9  00000000  00000000  00004a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e90  00000000  00000000  000051fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	49 c1       	rjmp	.+658    	; 0x298 <__vector_1>
   6:	00 00       	nop
   8:	56 c1       	rjmp	.+684    	; 0x2b6 <__vector_2>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	af c3       	rjmp	.+1886   	; 0x794 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c7 c3       	rjmp	.+1934   	; 0x7ec <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	29 c4       	rjmp	.+2130   	; 0x8b8 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	7f c0       	rjmp	.+254    	; 0x174 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e7       	ldi	r30, 0x70	; 112
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 38       	cpi	r26, 0x83	; 131
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3b d1       	rcall	.+630    	; 0x396 <main>
 120:	a5 c6       	rjmp	.+3402   	; 0xe6c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:


volatile char flag_ADC=0;
int ADC_hold = 0;

void init_ADC(){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);    //Prescaler at til 128 | clock 125Khz
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	87 60       	ori	r24, 0x07	; 7
 130:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);				//reference
 132:	ac e7       	ldi	r26, 0x7C	; 124
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	8c 91       	ld	r24, X
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	8c 93       	st	X, r24
	ADMUX &=~ (1<<REFS1);               //+5v voltage reference
 13c:	8c 91       	ld	r24, X
 13e:	8f 77       	andi	r24, 0x7F	; 127
 140:	8c 93       	st	X, r24
	
	DIDR0 = (1<<ADC0D) | (1<<ADC1D); // digital input disable
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	ADCSRA |= (1<<ADEN);                //Enable ADC
 148:	80 81       	ld	r24, Z
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADIE);	//enable intrerrupt
 14e:	80 81       	ld	r24, Z
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 83       	st	Z, r24
	
	
	
	ADCSRB |= (1<<ADTS2); //Kigger på timer 0 overflow 
 154:	cb e7       	ldi	r28, 0x7B	; 123
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	88 81       	ld	r24, Y
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADATE);  // Auto trigger mode
 15e:	80 81       	ld	r24, Z
 160:	80 62       	ori	r24, 0x20	; 32
 162:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC); //Starts a new conversion
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
	ADMUX = 0x40;
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	8c 93       	st	X, r24
	
//NB benytter timer 0 til timer overflow
					
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <__vector_29>:


ISR(ADC_vect){
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
	
	flag_ADC = 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <flag_ADC>
	ADC_hold = ADCW;//Læser alle 10 bit
 188:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 18c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 190:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 194:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <init_phase_correct_alt>:
enum Timer{Horizontal,Vertical,Rotate,Grab};

void init_phase_correct_alt()
{
	//Timer 1
	DDRB|=(1<<PB6);   //pin 12
 1a6:	26 9a       	sbi	0x04, 6	; 4
	TCCR1A|=(1<<COM1B1);	//Clear OC1B on Compare Match when up-counting. Set OC1A on Compare Match when down-counting
 1a8:	e0 e8       	ldi	r30, 0x80	; 128
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24
	TCCR1B =(1<<CS12)|(1<<WGM13);   //prescalling by 256
 1b2:	24 e1       	ldi	r18, 0x14	; 20
 1b4:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	ICR1= 625;  //top value then OC1A pin can be used as output  // 256 bit top value
 1b8:	81 e7       	ldi	r24, 0x71	; 113
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 1c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1B = 50; // Går til start tilstand
 1c4:	62 e3       	ldi	r22, 0x32	; 50
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 1cc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	//TCCR1B =(1<<CS00); // Stops the timer
	
	//Timer 3
	DDRE|=(1<<PE3);   //pin 5
 1d0:	4d e2       	ldi	r20, 0x2D	; 45
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	6b 9a       	sbi	0x0d, 3	; 13
	TCCR3A|=(1<<COM3A1);	//Clear OC3A
 1d6:	e0 e9       	ldi	r30, 0x90	; 144
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	30 81       	ld	r19, Z
 1dc:	30 68       	ori	r19, 0x80	; 128
 1de:	30 83       	st	Z, r19
	TCCR3B =(1<<CS12)|(1<<WGM13);   //prescalling by 256
 1e0:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	ICR3= 625;  //top value
 1e4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 1e8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	OCR3A = 50; // Går til start tilstand
 1ec:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 1f0:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	
	//Timer 4	
	DDRH|=(1<<PH5);   //pin 8
 1f4:	e1 e0       	ldi	r30, 0x01	; 1
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	30 81       	ld	r19, Z
 1fa:	30 62       	ori	r19, 0x20	; 32
 1fc:	30 83       	st	Z, r19
	TCCR4A|=(1<<COM4C1);	//Clear OC4C
 1fe:	e0 ea       	ldi	r30, 0xA0	; 160
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	30 81       	ld	r19, Z
 204:	38 60       	ori	r19, 0x08	; 8
 206:	30 83       	st	Z, r19
	TCCR4B =(1<<CS42)|(1<<WGM43);   //prescalling by 256
 208:	20 93 a1 00 	sts	0x00A1, r18	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	ICR4= 625;  //top value
 20c:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 210:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
	OCR4C = 45; // Går til start tilstand
 214:	50 93 ad 00 	sts	0x00AD, r21	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 218:	40 93 ac 00 	sts	0x00AC, r20	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	
	//Timer 5
	DDRL|=(1<<PL3);   //pin 46
 21c:	ea e0       	ldi	r30, 0x0A	; 10
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	30 81       	ld	r19, Z
 222:	38 60       	ori	r19, 0x08	; 8
 224:	30 83       	st	Z, r19
	TCCR5A|=(1<<COM5A1);	//Clear OC5C
 226:	e0 e2       	ldi	r30, 0x20	; 32
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	30 81       	ld	r19, Z
 22c:	30 68       	ori	r19, 0x80	; 128
 22e:	30 83       	st	Z, r19
	TCCR5B =(1<<CS52)|(1<<WGM53);   //prescalling by 256
 230:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	ICR5= 625;  //top value
 234:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 238:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
	OCR5A = 45; // Går til start tilstand
 23c:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 240:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 244:	08 95       	ret

00000246 <Change_DuCy>:
//typedef 


void Change_DuCy(enum Timer motor, int dutyCycle){	 
	
	switch (motor){
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	31 f0       	breq	.+12     	; 0x256 <Change_DuCy+0x10>
 24a:	50 f0       	brcs	.+20     	; 0x260 <Change_DuCy+0x1a>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	69 f0       	breq	.+26     	; 0x26a <Change_DuCy+0x24>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	81 f0       	breq	.+32     	; 0x274 <Change_DuCy+0x2e>
 254:	08 95       	ret
		case Vertical:
			OCR1B = dutyCycle;
 256:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 25a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
 25e:	08 95       	ret
		case Horizontal:
			OCR3A = dutyCycle;
 260:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 264:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
 268:	08 95       	ret
		case Rotate:
			OCR4C = dutyCycle;
 26a:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 26e:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
 272:	08 95       	ret
		case Grab:
			OCR5A = dutyCycle;
 274:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 278:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 27c:	08 95       	ret

0000027e <init_intr>:
}

void delay(int scale){
	
	Time_delay = scale;
	wait = 1;	
 27e:	58 9a       	sbi	0x0b, 0	; 11
 280:	e9 e6       	ldi	r30, 0x69	; 105
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	82 60       	ori	r24, 0x02	; 2
 288:	80 83       	st	Z, r24
 28a:	e8 9a       	sbi	0x1d, 0	; 29
 28c:	59 9a       	sbi	0x0b, 1	; 11
 28e:	80 81       	ld	r24, Z
 290:	88 60       	ori	r24, 0x08	; 8
 292:	80 83       	st	Z, r24
 294:	e9 9a       	sbi	0x1d, 1	; 29
 296:	08 95       	ret

00000298 <__vector_1>:
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <pressed_L>
 2aa:	8f 91       	pop	r24
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_2>:
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	8f 93       	push	r24
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <pressed_R>
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <ftos>:
}

//konverterer en float til en string	
void ftos(char *string, float input){
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	6c 01       	movw	r12, r24
 2ec:	4a 01       	movw	r8, r20
 2ee:	5b 01       	movw	r10, r22
	char *current = 0; 
	uint8_t len = 0; 
	int value = 0;  
	
	//Fjerner alle decimaltallene og konvertere det til en string
	value = (int)input;
 2f0:	cb 01       	movw	r24, r22
 2f2:	ba 01       	movw	r22, r20
 2f4:	e4 d3       	rcall	.+1992   	; 0xabe <__fixsfsi>
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	ec 01       	movw	r28, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2fc:	4a e0       	ldi	r20, 0x0A	; 10
 2fe:	b6 01       	movw	r22, r12
 300:	82 d5       	rcall	.+2820   	; 0xe06 <__itoa_ncheck>
	itoa(value,string,10); 
	 
	//Finder længden af heltallet (som string) og indsætter et komma bagefter
	len = strlen(string); 
 302:	f6 01       	movw	r30, r12
 304:	01 90       	ld	r0, Z+
 306:	00 20       	and	r0, r0
 308:	e9 f7       	brne	.-6      	; 0x304 <ftos+0x30>
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	7f 01       	movw	r14, r30
 30e:	ec 18       	sub	r14, r12
 310:	fd 08       	sbc	r15, r13
	pos = len; 
	string[pos++] = ','; 
 312:	11 e0       	ldi	r17, 0x01	; 1
 314:	1e 0d       	add	r17, r14
 316:	ff 24       	eor	r15, r15
 318:	f6 01       	movw	r30, r12
 31a:	ee 0d       	add	r30, r14
 31c:	ff 1d       	adc	r31, r15
 31e:	8c e2       	ldi	r24, 0x2C	; 44
 320:	80 83       	st	Z, r24
	
	//Tager hvert enkelt decimaltal og sætter det efter kommaet
	while(pos < (size + len + 1)){
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	e8 0e       	add	r14, r24
 326:	f1 1c       	adc	r15, r1
 328:	81 2f       	mov	r24, r17
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	8e 15       	cp	r24, r14
 32e:	9f 05       	cpc	r25, r15
 330:	34 f5       	brge	.+76     	; 0x37e <ftos+0xaa>
		input -= (float)value; 
 332:	be 01       	movw	r22, r28
 334:	dd 0f       	add	r29, r29
 336:	88 0b       	sbc	r24, r24
 338:	99 0b       	sbc	r25, r25
 33a:	f4 d3       	rcall	.+2024   	; 0xb24 <__floatsisf>
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	c5 01       	movw	r24, r10
 342:	b4 01       	movw	r22, r8
 344:	ef d2       	rcall	.+1502   	; 0x924 <__subsf3>
		input *= 10;  
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e2       	ldi	r20, 0x20	; 32
 34c:	51 e4       	ldi	r21, 0x41	; 65
 34e:	76 d4       	rcall	.+2284   	; 0xc3c <__mulsf3>
 350:	4b 01       	movw	r8, r22
 352:	5c 01       	movw	r10, r24
		value = (int)input;
 354:	b4 d3       	rcall	.+1896   	; 0xabe <__fixsfsi>
 356:	dc 01       	movw	r26, r24
 358:	cb 01       	movw	r24, r22
 35a:	ec 01       	movw	r28, r24
 35c:	4a e0       	ldi	r20, 0x0A	; 10
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	51 d5       	rcall	.+2722   	; 0xe06 <__itoa_ncheck>
		itoa(value, current,10); 
		string[pos++] = *current; 
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	21 0f       	add	r18, r17
 368:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x700000>
 36c:	f6 01       	movw	r30, r12
 36e:	e1 0f       	add	r30, r17
 370:	f1 1d       	adc	r31, r1
 372:	80 83       	st	Z, r24
 374:	12 2f       	mov	r17, r18
	len = strlen(string); 
	pos = len; 
	string[pos++] = ','; 
	
	//Tager hvert enkelt decimaltal og sætter det efter kommaet
	while(pos < (size + len + 1)){
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	2e 15       	cp	r18, r14
 37a:	3f 05       	cpc	r19, r15
 37c:	d4 f2       	brlt	.-76     	; 0x332 <ftos+0x5e>
		input *= 10;  
		value = (int)input;
		itoa(value, current,10); 
		string[pos++] = *current; 
	}
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	bf 90       	pop	r11
 38e:	af 90       	pop	r10
 390:	9f 90       	pop	r9
 392:	8f 90       	pop	r8
 394:	08 95       	ret

00000396 <main>:
}



int main(void)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	66 97       	sbiw	r28, 0x16	; 22
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
    init_phase_correct_alt();
 3aa:	fd de       	rcall	.-518    	; 0x1a6 <init_phase_correct_alt>
	init_ADC();
 3ac:	bb de       	rcall	.-650    	; 0x124 <init_ADC>
	init_uart(103);
 3ae:	87 e6       	ldi	r24, 0x67	; 103
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	40 d2       	rcall	.+1152   	; 0x834 <init_uart>
	init_timer();
 3b4:	d3 d1       	rcall	.+934    	; 0x75c <init_timer>
	EN_intr_RX();
 3b6:	7a d2       	rcall	.+1268   	; 0x8ac <EN_intr_RX>
	init_intr();
 3b8:	62 df       	rcall	.-316    	; 0x27e <init_intr>
	sei();
 3ba:	78 94       	sei
	
	int grab = 45, Vert = 50,Horiz = 50 , rotate = 45, Rotate_IN = 538, Vertical_IN=509, Horizontal_IN=503; //Initialiseret til startværdien for robotten
	int middle; int diff; int wait_time = 0;
	char Voltage[6], *ptr, limit[5], motor=0, power=0;
 3bc:	f1 2c       	mov	r15, r1
 3be:	1e 86       	std	Y+14, r1	; 0x0e
	init_timer();
	EN_intr_RX();
	init_intr();
	sei();
	
	int grab = 45, Vert = 50,Horiz = 50 , rotate = 45, Rotate_IN = 538, Vertical_IN=509, Horizontal_IN=503; //Initialiseret til startværdien for robotten
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f7 ef       	ldi	r31, 0xF7	; 247
 3c4:	4f 2e       	mov	r4, r31
 3c6:	55 24       	eor	r5, r5
 3c8:	53 94       	inc	r5
 3ca:	f0 2d       	mov	r31, r0
 3cc:	0f 2e       	mov	r0, r31
 3ce:	fd ef       	ldi	r31, 0xFD	; 253
 3d0:	2f 2e       	mov	r2, r31
 3d2:	33 24       	eor	r3, r3
 3d4:	33 94       	inc	r3
 3d6:	f0 2d       	mov	r31, r0
 3d8:	0f 2e       	mov	r0, r31
 3da:	fa e1       	ldi	r31, 0x1A	; 26
 3dc:	8f 2e       	mov	r8, r31
 3de:	f2 e0       	ldi	r31, 0x02	; 2
 3e0:	9f 2e       	mov	r9, r31
 3e2:	f0 2d       	mov	r31, r0
 3e4:	2d e2       	ldi	r18, 0x2D	; 45
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	38 8b       	std	Y+16, r19	; 0x10
 3ea:	2f 87       	std	Y+15, r18	; 0x0f
 3ec:	82 e3       	ldi	r24, 0x32	; 50
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	9e 8b       	std	Y+22, r25	; 0x16
 3f2:	8d 8b       	std	Y+21, r24	; 0x15
 3f4:	e2 e3       	ldi	r30, 0x32	; 50
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	fc 8b       	std	Y+20, r31	; 0x14
 3fa:	eb 8b       	std	Y+19, r30	; 0x13
 3fc:	3a 8b       	std	Y+18, r19	; 0x12
 3fe:	29 8b       	std	Y+17, r18	; 0x11
}

void delay(int scale){
	
	Time_delay = scale;
	wait = 1;	
 400:	ee 24       	eor	r14, r14
 402:	e3 94       	inc	r14
 404:	61 2c       	mov	r6, r1
 406:	71 2c       	mov	r7, r1
/////Sender
		
		if(flag==1){
			flag = 0;
			ptr = buff;
			memset(limit,0,strlen(limit));
 408:	ce 01       	movw	r24, r28
 40a:	07 96       	adiw	r24, 0x07	; 7
 40c:	9d 87       	std	Y+13, r25	; 0x0d
 40e:	8c 87       	std	Y+12, r24	; 0x0c
		
		//Konverterer kontrollerns værdi til volt og gemmer den som en float 
		volt = map_float(Rotate_IN,0,1023,0,5); 
	
		//Konverterer en float til en string
		memset(Voltage,0,strlen(Voltage));
 410:	8e 01       	movw	r16, r28
 412:	0f 5f       	subi	r16, 0xFF	; 255
 414:	1f 4f       	sbci	r17, 0xFF	; 255

    while (1) 
    {
		//Skaber et delay til robotarmen så den kan operere ved forskællige hastigheder 
		//Wait_time styrer hastigheden 
		if(wait==0){
 416:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 41a:	81 11       	cpse	r24, r1
 41c:	e1 c0       	rjmp	.+450    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
  /////////////////////////////////
 //         ADC Update          //
/////////////////////////////////
			
			//Når en ADC sample er klar bliver de analoge input på skift opdateret
			if(flag_ADC==1){
 41e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <flag_ADC>
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	59 f5       	brne	.+86     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		
				flag_ADC = 0;
 426:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <flag_ADC>
		
				if(ADMUX==0b01000000){
 42a:	ec e7       	ldi	r30, 0x7C	; 124
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	80 34       	cpi	r24, 0x40	; 64
 432:	51 f4       	brne	.+20     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
					Rotate_IN = ADC_hold;//Analog0 | Højre x værdi
 434:	80 90 12 02 	lds	r8, 0x0212	; 0x800212 <__data_end>
 438:	90 90 13 02 	lds	r9, 0x0213	; 0x800213 <__data_end+0x1>
					ADMUX = 0x40;
 43c:	20 e4       	ldi	r18, 0x40	; 64
 43e:	20 83       	st	Z, r18
					ADMUX |=(1<<MUX1);
 440:	80 81       	ld	r24, Z
 442:	82 60       	ori	r24, 0x02	; 2
 444:	80 83       	st	Z, r24
 446:	1a c0       	rjmp	.+52     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
				}
				else if(ADMUX==0b01000010){
 448:	ec e7       	ldi	r30, 0x7C	; 124
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	82 34       	cpi	r24, 0x42	; 66
 450:	51 f4       	brne	.+20     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
					Horizontal_IN = ADC_hold;//Analog2 | Venstre x værdi
 452:	40 90 12 02 	lds	r4, 0x0212	; 0x800212 <__data_end>
 456:	50 90 13 02 	lds	r5, 0x0213	; 0x800213 <__data_end+0x1>
					ADMUX = 0x40;
 45a:	20 e4       	ldi	r18, 0x40	; 64
 45c:	20 83       	st	Z, r18
					ADMUX |= (1<<MUX0)|(1<<MUX1);
 45e:	80 81       	ld	r24, Z
 460:	83 60       	ori	r24, 0x03	; 3
 462:	80 83       	st	Z, r24
 464:	0b c0       	rjmp	.+22     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
				}
				else if(ADMUX==0b01000011){
 466:	ec e7       	ldi	r30, 0x7C	; 124
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	83 34       	cpi	r24, 0x43	; 67
 46e:	31 f4       	brne	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					Vertical_IN = ADC_hold;//Analog3 | Venstre y værdi
 470:	20 90 12 02 	lds	r2, 0x0212	; 0x800212 <__data_end>
 474:	30 90 13 02 	lds	r3, 0x0213	; 0x800213 <__data_end+0x1>
					ADMUX = 0x40;
 478:	20 e4       	ldi	r18, 0x40	; 64
 47a:	20 83       	st	Z, r18
  /////////////////////////////////
 //    Robotarm styringskode    //
/////////////////////////////////

			//Trykknapper til grabben
			if(pressed_L == 1 || pressed_R == 1){
 47c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <pressed_L>
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	21 f0       	breq	.+8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 484:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <pressed_R>
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	49 f5       	brne	.+82     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			
				grab += pressed_R-pressed_L;	
 48c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <pressed_R>
 490:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <pressed_L>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	82 1b       	sub	r24, r18
 498:	91 09       	sbc	r25, r1
 49a:	e9 89       	ldd	r30, Y+17	; 0x11
 49c:	fa 89       	ldd	r31, Y+18	; 0x12
 49e:	8e 0f       	add	r24, r30
 4a0:	9f 1f       	adc	r25, r31
				// Boundaries
				if(grab < 24){
 4a2:	88 31       	cpi	r24, 0x18	; 24
 4a4:	91 05       	cpc	r25, r1
 4a6:	4c f0       	brlt	.+18     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4a8:	9a 8b       	std	Y+18, r25	; 0x12
 4aa:	89 8b       	std	Y+17, r24	; 0x11
 4ac:	c7 97       	sbiw	r24, 0x37	; 55
 4ae:	44 f0       	brlt	.+16     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4b0:	26 e3       	ldi	r18, 0x36	; 54
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	3a 8b       	std	Y+18, r19	; 0x12
 4b6:	29 8b       	std	Y+17, r18	; 0x11
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
					grab = 24;
 4ba:	38 e1       	ldi	r19, 0x18	; 24
 4bc:	39 8b       	std	Y+17, r19	; 0x11
 4be:	1a 8a       	std	Y+18, r1	; 0x12
				} 
				else if(grab > 54){
					grab = 54;
				}
				Change_DuCy(Grab, grab);
 4c0:	69 89       	ldd	r22, Y+17	; 0x11
 4c2:	7a 89       	ldd	r23, Y+18	; 0x12
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	bf de       	rcall	.-642    	; 0x246 <Change_DuCy>
				wait_time += 1;
			
				if((PIND&0b00000010) == 0b00000010){
 4c8:	49 99       	sbic	0x09, 1	; 9
					pressed_R = 0;
 4ca:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <pressed_R>
				}
				if((PIND&0b00000001) == 0b00000001){
 4ce:	48 9b       	sbis	0x09, 0	; 9
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
					pressed_L = 0;
 4d2:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <pressed_L>
				} 
				else if(grab > 54){
					grab = 54;
				}
				Change_DuCy(Grab, grab);
				wait_time += 1;
 4d6:	cc 24       	eor	r12, r12
 4d8:	c3 94       	inc	r12
 4da:	d1 2c       	mov	r13, r1
 4dc:	06 c0       	rjmp	.+12     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4de:	c6 2c       	mov	r12, r6
 4e0:	d7 2c       	mov	r13, r7
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e4:	cc 24       	eor	r12, r12
 4e6:	c3 94       	inc	r12
 4e8:	d1 2c       	mov	r13, r1
			}
		
		
			// højre x | Rotate
			middle = 535;
			diff = Rotate_IN-middle;
 4ea:	c4 01       	movw	r24, r8
 4ec:	87 51       	subi	r24, 0x17	; 23
 4ee:	92 40       	sbci	r25, 0x02	; 2
			if (abs(diff)>10){
 4f0:	5c 01       	movw	r10, r24
 4f2:	22 f4       	brpl	.+8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f4:	aa 24       	eor	r10, r10
 4f6:	bb 24       	eor	r11, r11
 4f8:	a8 1a       	sub	r10, r24
 4fa:	b9 0a       	sbc	r11, r25
 4fc:	eb e0       	ldi	r30, 0x0B	; 11
 4fe:	ae 16       	cp	r10, r30
 500:	b1 04       	cpc	r11, r1
 502:	24 f1       	brlt	.+72     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			
				rotate -= diff/abs(diff);
 504:	b5 01       	movw	r22, r10
 506:	fd d3       	rcall	.+2042   	; 0xd02 <__divmodhi4>
 508:	8f 85       	ldd	r24, Y+15	; 0x0f
 50a:	98 89       	ldd	r25, Y+16	; 0x10
 50c:	86 1b       	sub	r24, r22
 50e:	97 0b       	sbc	r25, r23
				// Boundaries
				if(rotate < 18){
 510:	82 31       	cpi	r24, 0x12	; 18
 512:	91 05       	cpc	r25, r1
 514:	54 f0       	brlt	.+20     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 516:	98 8b       	std	Y+16, r25	; 0x10
 518:	8f 87       	std	Y+15, r24	; 0x0f
 51a:	8c 34       	cpi	r24, 0x4C	; 76
 51c:	91 05       	cpc	r25, r1
 51e:	44 f0       	brlt	.+16     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 520:	2b e4       	ldi	r18, 0x4B	; 75
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	38 8b       	std	Y+16, r19	; 0x10
 526:	2f 87       	std	Y+15, r18	; 0x0f
 528:	03 c0       	rjmp	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
					rotate = 18;
 52a:	32 e1       	ldi	r19, 0x12	; 18
 52c:	3f 87       	std	Y+15, r19	; 0x0f
 52e:	18 8a       	std	Y+16, r1	; 0x10
				} 
				else if(rotate > 75){
					rotate = 75;
				}
				Change_DuCy(Rotate, rotate);
 530:	6f 85       	ldd	r22, Y+15	; 0x0f
 532:	78 89       	ldd	r23, Y+16	; 0x10
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	87 de       	rcall	.-754    	; 0x246 <Change_DuCy>
				wait_time += 4-abs(diff)/150;
 538:	c5 01       	movw	r24, r10
 53a:	66 e9       	ldi	r22, 0x96	; 150
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	e1 d3       	rcall	.+1986   	; 0xd02 <__divmodhi4>
 540:	84 e0       	ldi	r24, 0x04	; 4
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	86 1b       	sub	r24, r22
 546:	97 0b       	sbc	r25, r23
 548:	c8 0e       	add	r12, r24
 54a:	d9 1e       	adc	r13, r25
			}
		
		
			// venstre y | Vertical
			middle = 509;
			diff = Vertical_IN-middle;
 54c:	c1 01       	movw	r24, r2
 54e:	8d 5f       	subi	r24, 0xFD	; 253
 550:	91 40       	sbci	r25, 0x01	; 1
			if (abs(diff)>10){
 552:	5c 01       	movw	r10, r24
 554:	22 f4       	brpl	.+8      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 556:	aa 24       	eor	r10, r10
 558:	bb 24       	eor	r11, r11
 55a:	a8 1a       	sub	r10, r24
 55c:	b9 0a       	sbc	r11, r25
 55e:	eb e0       	ldi	r30, 0x0B	; 11
 560:	ae 16       	cp	r10, r30
 562:	b1 04       	cpc	r11, r1
 564:	ac f0       	brlt	.+42     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
			
				Vert -= diff/abs(diff);
 566:	b5 01       	movw	r22, r10
 568:	cc d3       	rcall	.+1944   	; 0xd02 <__divmodhi4>
 56a:	2b 89       	ldd	r18, Y+19	; 0x13
 56c:	3c 89       	ldd	r19, Y+20	; 0x14
 56e:	26 1b       	sub	r18, r22
 570:	37 0b       	sbc	r19, r23
 572:	3c 8b       	std	Y+20, r19	; 0x14
 574:	2b 8b       	std	Y+19, r18	; 0x13
				// Boundaries
			
			
				Change_DuCy(Vertical, Vert);
 576:	b9 01       	movw	r22, r18
 578:	8e 2d       	mov	r24, r14
 57a:	65 de       	rcall	.-822    	; 0x246 <Change_DuCy>
				wait_time += 5-abs(diff)/150;
 57c:	c5 01       	movw	r24, r10
 57e:	66 e9       	ldi	r22, 0x96	; 150
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	bf d3       	rcall	.+1918   	; 0xd02 <__divmodhi4>
 584:	85 e0       	ldi	r24, 0x05	; 5
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	86 1b       	sub	r24, r22
 58a:	97 0b       	sbc	r25, r23
 58c:	c8 0e       	add	r12, r24
 58e:	d9 1e       	adc	r13, r25
			}
		
			// venstre x | Horizontal
			middle = 503;
			diff = Horizontal_IN-middle;
 590:	c2 01       	movw	r24, r4
 592:	87 5f       	subi	r24, 0xF7	; 247
 594:	91 40       	sbci	r25, 0x01	; 1
			if (abs(diff)>10){
 596:	5c 01       	movw	r10, r24
 598:	22 f4       	brpl	.+8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59a:	aa 24       	eor	r10, r10
 59c:	bb 24       	eor	r11, r11
 59e:	a8 1a       	sub	r10, r24
 5a0:	b9 0a       	sbc	r11, r25
 5a2:	3b e0       	ldi	r19, 0x0B	; 11
 5a4:	a3 16       	cp	r10, r19
 5a6:	b1 04       	cpc	r11, r1
 5a8:	ac f0       	brlt	.+42     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
			
				Horiz -= diff/abs(diff);
 5aa:	b5 01       	movw	r22, r10
 5ac:	aa d3       	rcall	.+1876   	; 0xd02 <__divmodhi4>
 5ae:	8d 89       	ldd	r24, Y+21	; 0x15
 5b0:	9e 89       	ldd	r25, Y+22	; 0x16
 5b2:	86 1b       	sub	r24, r22
 5b4:	97 0b       	sbc	r25, r23
 5b6:	9e 8b       	std	Y+22, r25	; 0x16
 5b8:	8d 8b       	std	Y+21, r24	; 0x15
				// Boundaries
			
			
				Change_DuCy(Horizontal, Horiz);
 5ba:	bc 01       	movw	r22, r24
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	43 de       	rcall	.-890    	; 0x246 <Change_DuCy>
				wait_time += 5-abs(diff)/150;
 5c0:	c5 01       	movw	r24, r10
 5c2:	66 e9       	ldi	r22, 0x96	; 150
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	9d d3       	rcall	.+1850   	; 0xd02 <__divmodhi4>
 5c8:	85 e0       	ldi	r24, 0x05	; 5
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	86 1b       	sub	r24, r22
 5ce:	97 0b       	sbc	r25, r23
 5d0:	c8 0e       	add	r12, r24
 5d2:	d9 1e       	adc	r13, r25
	pressed_R = 1;
}

void delay(int scale){
	
	Time_delay = scale;
 5d4:	d0 92 02 02 	sts	0x0202, r13	; 0x800202 <Time_delay+0x1>
 5d8:	c0 92 01 02 	sts	0x0201, r12	; 0x800201 <Time_delay>
	wait = 1;	
 5dc:	e0 92 00 02 	sts	0x0200, r14	; 0x800200 <__data_start>
 //  SEND AND RECIVE FROM UART  //
/////////////////////////////////		

/////Sender
		
		if(flag==1){
 5e0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <flag>
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	b9 f5       	brne	.+110    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
			flag = 0;
 5e8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <flag>
			ptr = buff;
			memset(limit,0,strlen(limit));
 5ec:	ec 85       	ldd	r30, Y+12	; 0x0c
 5ee:	fd 85       	ldd	r31, Y+13	; 0x0d
 5f0:	01 90       	ld	r0, Z+
 5f2:	00 20       	and	r0, r0
 5f4:	e9 f7       	brne	.-6      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5f6:	31 97       	sbiw	r30, 0x01	; 1
 5f8:	af 01       	movw	r20, r30
 5fa:	2c 85       	ldd	r18, Y+12	; 0x0c
 5fc:	3d 85       	ldd	r19, Y+13	; 0x0d
 5fe:	42 1b       	sub	r20, r18
 600:	53 0b       	sbc	r21, r19
 602:	66 2d       	mov	r22, r6
 604:	77 2d       	mov	r23, r7
 606:	ce 01       	movw	r24, r28
 608:	07 96       	adiw	r24, 0x07	; 7
 60a:	ef d3       	rcall	.+2014   	; 0xdea <memset>
			strcpy(limit, ptr);
 60c:	6f e1       	ldi	r22, 0x1F	; 31
 60e:	72 e0       	ldi	r23, 0x02	; 2
 610:	ce 01       	movw	r24, r28
 612:	07 96       	adiw	r24, 0x07	; 7
 614:	f1 d3       	rcall	.+2018   	; 0xdf8 <strcpy>
			memset(buff,0,strlen(buff));
 616:	ef e1       	ldi	r30, 0x1F	; 31
 618:	f2 e0       	ldi	r31, 0x02	; 2
 61a:	01 90       	ld	r0, Z+
 61c:	00 20       	and	r0, r0
 61e:	e9 f7       	brne	.-6      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 620:	31 97       	sbiw	r30, 0x01	; 1
 622:	af 01       	movw	r20, r30
 624:	4f 51       	subi	r20, 0x1F	; 31
 626:	52 40       	sbci	r21, 0x02	; 2
 628:	66 2d       	mov	r22, r6
 62a:	77 2d       	mov	r23, r7
 62c:	8f e1       	ldi	r24, 0x1F	; 31
 62e:	92 e0       	ldi	r25, 0x02	; 2
 630:	dc d3       	rcall	.+1976   	; 0xdea <memset>
			motor = limit[0];
 632:	3f 81       	ldd	r19, Y+7	; 0x07
 634:	3e 87       	std	Y+14, r19	; 0x0e
 636:	9b 85       	ldd	r25, Y+11	; 0x0b
 638:	90 53       	subi	r25, 0x30	; 48
			power = (((limit[2]-48)*100)+((limit[3]-48)*10)+limit[4]-48);
 63a:	89 85       	ldd	r24, Y+9	; 0x09
 63c:	80 53       	subi	r24, 0x30	; 48
 63e:	e4 e6       	ldi	r30, 0x64	; 100
 640:	8e 9f       	mul	r24, r30
 642:	90 0d       	add	r25, r0
 644:	11 24       	eor	r1, r1
 646:	8a 85       	ldd	r24, Y+10	; 0x0a
 648:	88 0f       	add	r24, r24
 64a:	80 56       	subi	r24, 0x60	; 96
 64c:	f8 2e       	mov	r15, r24
 64e:	ff 0c       	add	r15, r15
 650:	ff 0c       	add	r15, r15
 652:	f8 0e       	add	r15, r24
 654:	f9 0e       	add	r15, r25
		}
		
		switch(motor){
 656:	fe 85       	ldd	r31, Y+14	; 0x0e
 658:	f7 34       	cpi	r31, 0x47	; 71
 65a:	c9 f0       	breq	.+50     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 65c:	f2 35       	cpi	r31, 0x52	; 82
 65e:	09 f0       	breq	.+2      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 660:	48 c0       	rjmp	.+144    	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
}

//Arduinos map funktion
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 662:	2f 2d       	mov	r18, r15
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	a9 e3       	ldi	r26, 0x39	; 57
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	7a d3       	rcall	.+1780   	; 0xd60 <__umulhisi3>
 66c:	24 e6       	ldi	r18, 0x64	; 100
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	59 d3       	rcall	.+1714   	; 0xd28 <__divmodsi4>
 676:	ca 01       	movw	r24, r20
 678:	b9 01       	movw	r22, r18
 67a:	6e 5e       	subi	r22, 0xEE	; 238
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
			power = (((limit[2]-48)*100)+((limit[3]-48)*10)+limit[4]-48);
		}
		
		switch(motor){
			case 'R':
				rotate = map(power,0,100,18,75);
 682:	78 8b       	std	Y+16, r23	; 0x10
 684:	6f 87       	std	Y+15, r22	; 0x0f
				Change_DuCy(Rotate, rotate);
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	de dd       	rcall	.-1092   	; 0x246 <Change_DuCy>
				motor = 0;
 68a:	1e 86       	std	Y+14, r1	; 0x0e
				break;
 68c:	32 c0       	rjmp	.+100    	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
			case 'V':
				//Move code
				break;
			case 'G':
				grab = map(power,0,100,24,54);
 68e:	8f 2d       	mov	r24, r15
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	a0 e0       	ldi	r26, 0x00	; 0
 694:	b0 e0       	ldi	r27, 0x00	; 0
}

//Arduinos map funktion
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 696:	ac 01       	movw	r20, r24
 698:	bd 01       	movw	r22, r26
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	48 0f       	add	r20, r24
 6a4:	59 1f       	adc	r21, r25
 6a6:	6a 1f       	adc	r22, r26
 6a8:	7b 1f       	adc	r23, r27
 6aa:	db 01       	movw	r26, r22
 6ac:	ca 01       	movw	r24, r20
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	aa 1f       	adc	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	84 0f       	add	r24, r20
 6c0:	95 1f       	adc	r25, r21
 6c2:	a6 1f       	adc	r26, r22
 6c4:	b7 1f       	adc	r27, r23
 6c6:	bc 01       	movw	r22, r24
 6c8:	cd 01       	movw	r24, r26
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	24 e6       	ldi	r18, 0x64	; 100
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	26 d3       	rcall	.+1612   	; 0xd28 <__divmodsi4>
 6dc:	ca 01       	movw	r24, r20
 6de:	b9 01       	movw	r22, r18
 6e0:	68 5e       	subi	r22, 0xE8	; 232
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
				break;
			case 'V':
				//Move code
				break;
			case 'G':
				grab = map(power,0,100,24,54);
 6e8:	7a 8b       	std	Y+18, r23	; 0x12
 6ea:	69 8b       	std	Y+17, r22	; 0x11
				Change_DuCy(Grab, grab);
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	ab dd       	rcall	.-1194   	; 0x246 <Change_DuCy>
				motor = 0;
 6f0:	1e 86       	std	Y+14, r1	; 0x0e
		
		//Konverterer kontrollerns værdi til volt og gemmer den som en float 
		volt = map_float(Rotate_IN,0,1023,0,5); 
	
		//Konverterer en float til en string
		memset(Voltage,0,strlen(Voltage));
 6f2:	f8 01       	movw	r30, r16
 6f4:	01 90       	ld	r0, Z+
 6f6:	00 20       	and	r0, r0
 6f8:	e9 f7       	brne	.-6      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6fa:	31 97       	sbiw	r30, 0x01	; 1
 6fc:	af 01       	movw	r20, r30
 6fe:	40 1b       	sub	r20, r16
 700:	51 0b       	sbc	r21, r17
 702:	66 2d       	mov	r22, r6
 704:	77 2d       	mov	r23, r7
 706:	c8 01       	movw	r24, r16
 708:	70 d3       	rcall	.+1760   	; 0xdea <memset>
}

//Baseret på arduinos funktion map
double map_float(int x, double in_min, double in_max, double out_min, double out_max)
{
	return ((double)x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 70a:	b4 01       	movw	r22, r8
 70c:	09 2c       	mov	r0, r9
 70e:	00 0c       	add	r0, r0
 710:	88 0b       	sbc	r24, r24
 712:	99 0b       	sbc	r25, r25
 714:	07 d2       	rcall	.+1038   	; 0xb24 <__floatsisf>
 716:	20 e0       	ldi	r18, 0x00	; 0
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	40 ea       	ldi	r20, 0xA0	; 160
 71c:	50 e4       	ldi	r21, 0x40	; 64
 71e:	8e d2       	rcall	.+1308   	; 0xc3c <__mulsf3>
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	30 ec       	ldi	r19, 0xC0	; 192
 724:	4f e7       	ldi	r20, 0x7F	; 127
 726:	54 e4       	ldi	r21, 0x44	; 68
 728:	62 d1       	rcall	.+708    	; 0x9ee <__divsf3>
 72a:	20 e0       	ldi	r18, 0x00	; 0
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	a9 01       	movw	r20, r18
 730:	fa d0       	rcall	.+500    	; 0x926 <__addsf3>
 732:	ab 01       	movw	r20, r22
 734:	bc 01       	movw	r22, r24
		//Konverterer kontrollerns værdi til volt og gemmer den som en float 
		volt = map_float(Rotate_IN,0,1023,0,5); 
	
		//Konverterer en float til en string
		memset(Voltage,0,strlen(Voltage));
		ftos(Voltage, volt);
 736:	c8 01       	movw	r24, r16
 738:	cd dd       	rcall	.-1126   	; 0x2d4 <ftos>
		
		//Sender Stringen til uarten 
		if(update_uart == 1){
 73a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <update_uart>
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	09 f0       	breq	.+2      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 742:	69 ce       	rjmp	.-814    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			put_string("Rotate pin = ");
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	92 e0       	ldi	r25, 0x02	; 2
 748:	8f d0       	rcall	.+286    	; 0x868 <put_string>
			put_string(Voltage);
 74a:	c8 01       	movw	r24, r16
 74c:	8d d0       	rcall	.+282    	; 0x868 <put_string>
			put_char('V');
 74e:	86 e5       	ldi	r24, 0x56	; 86
 750:	83 d0       	rcall	.+262    	; 0x858 <put_char>
			put_char('\r');
 752:	8d e0       	ldi	r24, 0x0D	; 13
 754:	81 d0       	rcall	.+258    	; 0x858 <put_char>
			
			update_uart = 0;
 756:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <update_uart>
 75a:	5d ce       	rjmp	.-838    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

0000075c <init_timer>:
int Time_delay=70;
volatile char wait = 1, update_uart=0;

void init_timer(){
//timer 2
	TCCR2B |=(1<<WGM22);  //CTC mode
 75c:	e1 eb       	ldi	r30, 0xB1	; 177
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	88 60       	ori	r24, 0x08	; 8
 764:	80 83       	st	Z, r24
	TCCR2B |=(1<<CS22)|(1<<CS21)|(1<<CS20); //prescalling til 1024
 766:	80 81       	ld	r24, Z
 768:	87 60       	ori	r24, 0x07	; 7
 76a:	80 83       	st	Z, r24
	OCR2A=124;		//delay på 0,008s
 76c:	8c e7       	ldi	r24, 0x7C	; 124
 76e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	
	TIMSK2|=(1<<OCIE2A);
 772:	e0 e7       	ldi	r30, 0x70	; 112
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	80 83       	st	Z, r24
	
//timer 0
	TCCR0A |= (1<<WGM02);//CTC mode
 77c:	84 b5       	in	r24, 0x24	; 36
 77e:	88 60       	ori	r24, 0x08	; 8
 780:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02)|(1<<CS00);//prescaler 1024
 782:	85 b5       	in	r24, 0x25	; 37
 784:	85 60       	ori	r24, 0x05	; 5
 786:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |=(1<<TOIE0); //Overflow interrupt enable
 788:	ee e6       	ldi	r30, 0x6E	; 110
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	81 60       	ori	r24, 0x01	; 1
 790:	80 83       	st	Z, r24
 792:	08 95       	ret

00000794 <__vector_13>:
	

}
//Bestemmer hvor lang tid delayet for motoren er 
ISR(TIMER2_COMPA_vect){
 794:	1f 92       	push	r1
 796:	0f 92       	push	r0
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	0f 92       	push	r0
 79c:	11 24       	eor	r1, r1
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
	static int i=0;
	if(i>=Time_delay){
 7a6:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <i.1492>
 7aa:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <i.1492+0x1>
 7ae:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Time_delay>
 7b2:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <Time_delay+0x1>
 7b6:	28 17       	cp	r18, r24
 7b8:	39 07       	cpc	r19, r25
 7ba:	34 f0       	brlt	.+12     	; 0x7c8 <__vector_13+0x34>
	wait = 0;
 7bc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
	i=0;
 7c0:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <i.1492+0x1>
 7c4:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <i.1492>
	}
	i++;
 7c8:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <i.1492>
 7cc:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <i.1492+0x1>
 7d0:	01 96       	adiw	r24, 0x01	; 1
 7d2:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <i.1492+0x1>
 7d6:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <i.1492>
}
 7da:	9f 91       	pop	r25
 7dc:	8f 91       	pop	r24
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	0f 90       	pop	r0
 7e8:	1f 90       	pop	r1
 7ea:	18 95       	reti

000007ec <__vector_23>:

//overflower ved 16ms
//Benyttes til at opdatere uarten samt styre adc konverteringen 
ISR(TIMER0_OVF_vect){
 7ec:	1f 92       	push	r1
 7ee:	0f 92       	push	r0
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	0f 92       	push	r0
 7f4:	11 24       	eor	r1, r1
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
	//Skal være der for at der sker et interrupt
	static int i=0;
	if(i>=8){
 7fa:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <i.1498>
 7fe:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <i.1498+0x1>
 802:	08 97       	sbiw	r24, 0x08	; 8
 804:	3c f0       	brlt	.+14     	; 0x814 <__vector_23+0x28>
		update_uart=1;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <update_uart>
		i=0;
 80c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <i.1498+0x1>
 810:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <i.1498>
	}
	i++;
 814:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <i.1498>
 818:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <i.1498+0x1>
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <i.1498+0x1>
 822:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <i.1498>
 826:	9f 91       	pop	r25
 828:	8f 91       	pop	r24
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <init_uart>:
	UCSR0B |=(1<<RXCIE0);
}

void DIS_intr_RX(){
	
	UCSR0B &=~(1<<RXCIE0);
 834:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 838:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 842:	e1 ec       	ldi	r30, 0xC1	; 193
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	88 61       	ori	r24, 0x18	; 24
 84a:	80 83       	st	Z, r24
 84c:	e2 ec       	ldi	r30, 0xC2	; 194
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	86 60       	ori	r24, 0x06	; 6
 854:	80 83       	st	Z, r24
 856:	08 95       	ret

00000858 <put_char>:
 858:	e0 ec       	ldi	r30, 0xC0	; 192
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	90 81       	ld	r25, Z
 85e:	95 ff       	sbrs	r25, 5
 860:	fd cf       	rjmp	.-6      	; 0x85c <put_char+0x4>
 862:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 866:	08 95       	ret

00000868 <put_string>:
 868:	ef 92       	push	r14
 86a:	ff 92       	push	r15
 86c:	0f 93       	push	r16
 86e:	1f 93       	push	r17
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	fc 01       	movw	r30, r24
 876:	01 90       	ld	r0, Z+
 878:	00 20       	and	r0, r0
 87a:	e9 f7       	brne	.-6      	; 0x876 <put_string+0xe>
 87c:	9f 01       	movw	r18, r30
 87e:	28 1b       	sub	r18, r24
 880:	39 0b       	sbc	r19, r25
 882:	8c 01       	movw	r16, r24
 884:	c0 e0       	ldi	r28, 0x00	; 0
 886:	d0 e0       	ldi	r29, 0x00	; 0
 888:	c9 01       	movw	r24, r18
 88a:	02 97       	sbiw	r24, 0x02	; 2
 88c:	7c 01       	movw	r14, r24
 88e:	f8 01       	movw	r30, r16
 890:	81 91       	ld	r24, Z+
 892:	8f 01       	movw	r16, r30
 894:	e1 df       	rcall	.-62     	; 0x858 <put_char>
 896:	21 96       	adiw	r28, 0x01	; 1
 898:	ec 16       	cp	r14, r28
 89a:	fd 06       	cpc	r15, r29
 89c:	c4 f7       	brge	.-16     	; 0x88e <put_string+0x26>
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	ff 90       	pop	r15
 8a8:	ef 90       	pop	r14
 8aa:	08 95       	ret

000008ac <EN_intr_RX>:
 8ac:	e1 ec       	ldi	r30, 0xC1	; 193
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	80 68       	ori	r24, 0x80	; 128
 8b4:	80 83       	st	Z, r24
 8b6:	08 95       	ret

000008b8 <__vector_25>:
}


// modtager string/char via interrupt
ISR(USART0_RX_vect){
 8b8:	1f 92       	push	r1
 8ba:	0f 92       	push	r0
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	0f 92       	push	r0
 8c0:	11 24       	eor	r1, r1
 8c2:	0b b6       	in	r0, 0x3b	; 59
 8c4:	0f 92       	push	r0
 8c6:	2f 93       	push	r18
 8c8:	8f 93       	push	r24
 8ca:	9f 93       	push	r25
 8cc:	af 93       	push	r26
 8ce:	bf 93       	push	r27
 8d0:	ef 93       	push	r30
 8d2:	ff 93       	push	r31
	static int i = 0;
	
	buff[i] = UDR0;
 8d4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <i.1647>
 8d8:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <i.1647+0x1>
 8dc:	e6 ec       	ldi	r30, 0xC6	; 198
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	20 81       	ld	r18, Z
 8e2:	dc 01       	movw	r26, r24
 8e4:	a1 5e       	subi	r26, 0xE1	; 225
 8e6:	bd 4f       	sbci	r27, 0xFD	; 253
 8e8:	2c 93       	st	X, r18
	i++;
 8ea:	01 96       	adiw	r24, 0x01	; 1
 8ec:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <i.1647+0x1>
 8f0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <i.1647>
	
	if(UDR0 == '\r'){
 8f4:	80 81       	ld	r24, Z
 8f6:	8d 30       	cpi	r24, 0x0D	; 13
 8f8:	39 f4       	brne	.+14     	; 0x908 <__vector_25+0x50>
		flag = 1;
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <flag>
		i = 0;
 900:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <i.1647+0x1>
 904:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <i.1647>
	}
 908:	ff 91       	pop	r31
 90a:	ef 91       	pop	r30
 90c:	bf 91       	pop	r27
 90e:	af 91       	pop	r26
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	2f 91       	pop	r18
 916:	0f 90       	pop	r0
 918:	0b be       	out	0x3b, r0	; 59
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <__subsf3>:
 924:	50 58       	subi	r21, 0x80	; 128

00000926 <__addsf3>:
 926:	bb 27       	eor	r27, r27
 928:	aa 27       	eor	r26, r26
 92a:	0e d0       	rcall	.+28     	; 0x948 <__addsf3x>
 92c:	4d c1       	rjmp	.+666    	; 0xbc8 <__fp_round>
 92e:	3e d1       	rcall	.+636    	; 0xbac <__fp_pscA>
 930:	30 f0       	brcs	.+12     	; 0x93e <__addsf3+0x18>
 932:	43 d1       	rcall	.+646    	; 0xbba <__fp_pscB>
 934:	20 f0       	brcs	.+8      	; 0x93e <__addsf3+0x18>
 936:	31 f4       	brne	.+12     	; 0x944 <__addsf3+0x1e>
 938:	9f 3f       	cpi	r25, 0xFF	; 255
 93a:	11 f4       	brne	.+4      	; 0x940 <__addsf3+0x1a>
 93c:	1e f4       	brtc	.+6      	; 0x944 <__addsf3+0x1e>
 93e:	33 c1       	rjmp	.+614    	; 0xba6 <__fp_nan>
 940:	0e f4       	brtc	.+2      	; 0x944 <__addsf3+0x1e>
 942:	e0 95       	com	r30
 944:	e7 fb       	bst	r30, 7
 946:	29 c1       	rjmp	.+594    	; 0xb9a <__fp_inf>

00000948 <__addsf3x>:
 948:	e9 2f       	mov	r30, r25
 94a:	4f d1       	rcall	.+670    	; 0xbea <__fp_split3>
 94c:	80 f3       	brcs	.-32     	; 0x92e <__addsf3+0x8>
 94e:	ba 17       	cp	r27, r26
 950:	62 07       	cpc	r22, r18
 952:	73 07       	cpc	r23, r19
 954:	84 07       	cpc	r24, r20
 956:	95 07       	cpc	r25, r21
 958:	18 f0       	brcs	.+6      	; 0x960 <__addsf3x+0x18>
 95a:	71 f4       	brne	.+28     	; 0x978 <__addsf3x+0x30>
 95c:	9e f5       	brtc	.+102    	; 0x9c4 <__addsf3x+0x7c>
 95e:	67 c1       	rjmp	.+718    	; 0xc2e <__fp_zero>
 960:	0e f4       	brtc	.+2      	; 0x964 <__addsf3x+0x1c>
 962:	e0 95       	com	r30
 964:	0b 2e       	mov	r0, r27
 966:	ba 2f       	mov	r27, r26
 968:	a0 2d       	mov	r26, r0
 96a:	0b 01       	movw	r0, r22
 96c:	b9 01       	movw	r22, r18
 96e:	90 01       	movw	r18, r0
 970:	0c 01       	movw	r0, r24
 972:	ca 01       	movw	r24, r20
 974:	a0 01       	movw	r20, r0
 976:	11 24       	eor	r1, r1
 978:	ff 27       	eor	r31, r31
 97a:	59 1b       	sub	r21, r25
 97c:	99 f0       	breq	.+38     	; 0x9a4 <__addsf3x+0x5c>
 97e:	59 3f       	cpi	r21, 0xF9	; 249
 980:	50 f4       	brcc	.+20     	; 0x996 <__addsf3x+0x4e>
 982:	50 3e       	cpi	r21, 0xE0	; 224
 984:	68 f1       	brcs	.+90     	; 0x9e0 <__addsf3x+0x98>
 986:	1a 16       	cp	r1, r26
 988:	f0 40       	sbci	r31, 0x00	; 0
 98a:	a2 2f       	mov	r26, r18
 98c:	23 2f       	mov	r18, r19
 98e:	34 2f       	mov	r19, r20
 990:	44 27       	eor	r20, r20
 992:	58 5f       	subi	r21, 0xF8	; 248
 994:	f3 cf       	rjmp	.-26     	; 0x97c <__addsf3x+0x34>
 996:	46 95       	lsr	r20
 998:	37 95       	ror	r19
 99a:	27 95       	ror	r18
 99c:	a7 95       	ror	r26
 99e:	f0 40       	sbci	r31, 0x00	; 0
 9a0:	53 95       	inc	r21
 9a2:	c9 f7       	brne	.-14     	; 0x996 <__addsf3x+0x4e>
 9a4:	7e f4       	brtc	.+30     	; 0x9c4 <__addsf3x+0x7c>
 9a6:	1f 16       	cp	r1, r31
 9a8:	ba 0b       	sbc	r27, r26
 9aa:	62 0b       	sbc	r22, r18
 9ac:	73 0b       	sbc	r23, r19
 9ae:	84 0b       	sbc	r24, r20
 9b0:	ba f0       	brmi	.+46     	; 0x9e0 <__addsf3x+0x98>
 9b2:	91 50       	subi	r25, 0x01	; 1
 9b4:	a1 f0       	breq	.+40     	; 0x9de <__addsf3x+0x96>
 9b6:	ff 0f       	add	r31, r31
 9b8:	bb 1f       	adc	r27, r27
 9ba:	66 1f       	adc	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	c2 f7       	brpl	.-16     	; 0x9b2 <__addsf3x+0x6a>
 9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <__addsf3x+0x98>
 9c4:	ba 0f       	add	r27, r26
 9c6:	62 1f       	adc	r22, r18
 9c8:	73 1f       	adc	r23, r19
 9ca:	84 1f       	adc	r24, r20
 9cc:	48 f4       	brcc	.+18     	; 0x9e0 <__addsf3x+0x98>
 9ce:	87 95       	ror	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b7 95       	ror	r27
 9d6:	f7 95       	ror	r31
 9d8:	9e 3f       	cpi	r25, 0xFE	; 254
 9da:	08 f0       	brcs	.+2      	; 0x9de <__addsf3x+0x96>
 9dc:	b3 cf       	rjmp	.-154    	; 0x944 <__addsf3+0x1e>
 9de:	93 95       	inc	r25
 9e0:	88 0f       	add	r24, r24
 9e2:	08 f0       	brcs	.+2      	; 0x9e6 <__addsf3x+0x9e>
 9e4:	99 27       	eor	r25, r25
 9e6:	ee 0f       	add	r30, r30
 9e8:	97 95       	ror	r25
 9ea:	87 95       	ror	r24
 9ec:	08 95       	ret

000009ee <__divsf3>:
 9ee:	0c d0       	rcall	.+24     	; 0xa08 <__divsf3x>
 9f0:	eb c0       	rjmp	.+470    	; 0xbc8 <__fp_round>
 9f2:	e3 d0       	rcall	.+454    	; 0xbba <__fp_pscB>
 9f4:	40 f0       	brcs	.+16     	; 0xa06 <__divsf3+0x18>
 9f6:	da d0       	rcall	.+436    	; 0xbac <__fp_pscA>
 9f8:	30 f0       	brcs	.+12     	; 0xa06 <__divsf3+0x18>
 9fa:	21 f4       	brne	.+8      	; 0xa04 <__divsf3+0x16>
 9fc:	5f 3f       	cpi	r21, 0xFF	; 255
 9fe:	19 f0       	breq	.+6      	; 0xa06 <__divsf3+0x18>
 a00:	cc c0       	rjmp	.+408    	; 0xb9a <__fp_inf>
 a02:	51 11       	cpse	r21, r1
 a04:	15 c1       	rjmp	.+554    	; 0xc30 <__fp_szero>
 a06:	cf c0       	rjmp	.+414    	; 0xba6 <__fp_nan>

00000a08 <__divsf3x>:
 a08:	f0 d0       	rcall	.+480    	; 0xbea <__fp_split3>
 a0a:	98 f3       	brcs	.-26     	; 0x9f2 <__divsf3+0x4>

00000a0c <__divsf3_pse>:
 a0c:	99 23       	and	r25, r25
 a0e:	c9 f3       	breq	.-14     	; 0xa02 <__divsf3+0x14>
 a10:	55 23       	and	r21, r21
 a12:	b1 f3       	breq	.-20     	; 0xa00 <__divsf3+0x12>
 a14:	95 1b       	sub	r25, r21
 a16:	55 0b       	sbc	r21, r21
 a18:	bb 27       	eor	r27, r27
 a1a:	aa 27       	eor	r26, r26
 a1c:	62 17       	cp	r22, r18
 a1e:	73 07       	cpc	r23, r19
 a20:	84 07       	cpc	r24, r20
 a22:	38 f0       	brcs	.+14     	; 0xa32 <__divsf3_pse+0x26>
 a24:	9f 5f       	subi	r25, 0xFF	; 255
 a26:	5f 4f       	sbci	r21, 0xFF	; 255
 a28:	22 0f       	add	r18, r18
 a2a:	33 1f       	adc	r19, r19
 a2c:	44 1f       	adc	r20, r20
 a2e:	aa 1f       	adc	r26, r26
 a30:	a9 f3       	breq	.-22     	; 0xa1c <__divsf3_pse+0x10>
 a32:	33 d0       	rcall	.+102    	; 0xa9a <__divsf3_pse+0x8e>
 a34:	0e 2e       	mov	r0, r30
 a36:	3a f0       	brmi	.+14     	; 0xa46 <__divsf3_pse+0x3a>
 a38:	e0 e8       	ldi	r30, 0x80	; 128
 a3a:	30 d0       	rcall	.+96     	; 0xa9c <__divsf3_pse+0x90>
 a3c:	91 50       	subi	r25, 0x01	; 1
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	e6 95       	lsr	r30
 a42:	00 1c       	adc	r0, r0
 a44:	ca f7       	brpl	.-14     	; 0xa38 <__divsf3_pse+0x2c>
 a46:	29 d0       	rcall	.+82     	; 0xa9a <__divsf3_pse+0x8e>
 a48:	fe 2f       	mov	r31, r30
 a4a:	27 d0       	rcall	.+78     	; 0xa9a <__divsf3_pse+0x8e>
 a4c:	66 0f       	add	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	bb 1f       	adc	r27, r27
 a54:	26 17       	cp	r18, r22
 a56:	37 07       	cpc	r19, r23
 a58:	48 07       	cpc	r20, r24
 a5a:	ab 07       	cpc	r26, r27
 a5c:	b0 e8       	ldi	r27, 0x80	; 128
 a5e:	09 f0       	breq	.+2      	; 0xa62 <__divsf3_pse+0x56>
 a60:	bb 0b       	sbc	r27, r27
 a62:	80 2d       	mov	r24, r0
 a64:	bf 01       	movw	r22, r30
 a66:	ff 27       	eor	r31, r31
 a68:	93 58       	subi	r25, 0x83	; 131
 a6a:	5f 4f       	sbci	r21, 0xFF	; 255
 a6c:	2a f0       	brmi	.+10     	; 0xa78 <__divsf3_pse+0x6c>
 a6e:	9e 3f       	cpi	r25, 0xFE	; 254
 a70:	51 05       	cpc	r21, r1
 a72:	68 f0       	brcs	.+26     	; 0xa8e <__divsf3_pse+0x82>
 a74:	92 c0       	rjmp	.+292    	; 0xb9a <__fp_inf>
 a76:	dc c0       	rjmp	.+440    	; 0xc30 <__fp_szero>
 a78:	5f 3f       	cpi	r21, 0xFF	; 255
 a7a:	ec f3       	brlt	.-6      	; 0xa76 <__divsf3_pse+0x6a>
 a7c:	98 3e       	cpi	r25, 0xE8	; 232
 a7e:	dc f3       	brlt	.-10     	; 0xa76 <__divsf3_pse+0x6a>
 a80:	86 95       	lsr	r24
 a82:	77 95       	ror	r23
 a84:	67 95       	ror	r22
 a86:	b7 95       	ror	r27
 a88:	f7 95       	ror	r31
 a8a:	9f 5f       	subi	r25, 0xFF	; 255
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__divsf3_pse+0x74>
 a8e:	88 0f       	add	r24, r24
 a90:	91 1d       	adc	r25, r1
 a92:	96 95       	lsr	r25
 a94:	87 95       	ror	r24
 a96:	97 f9       	bld	r25, 7
 a98:	08 95       	ret
 a9a:	e1 e0       	ldi	r30, 0x01	; 1
 a9c:	66 0f       	add	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	88 1f       	adc	r24, r24
 aa2:	bb 1f       	adc	r27, r27
 aa4:	62 17       	cp	r22, r18
 aa6:	73 07       	cpc	r23, r19
 aa8:	84 07       	cpc	r24, r20
 aaa:	ba 07       	cpc	r27, r26
 aac:	20 f0       	brcs	.+8      	; 0xab6 <__divsf3_pse+0xaa>
 aae:	62 1b       	sub	r22, r18
 ab0:	73 0b       	sbc	r23, r19
 ab2:	84 0b       	sbc	r24, r20
 ab4:	ba 0b       	sbc	r27, r26
 ab6:	ee 1f       	adc	r30, r30
 ab8:	88 f7       	brcc	.-30     	; 0xa9c <__divsf3_pse+0x90>
 aba:	e0 95       	com	r30
 abc:	08 95       	ret

00000abe <__fixsfsi>:
 abe:	04 d0       	rcall	.+8      	; 0xac8 <__fixunssfsi>
 ac0:	68 94       	set
 ac2:	b1 11       	cpse	r27, r1
 ac4:	b5 c0       	rjmp	.+362    	; 0xc30 <__fp_szero>
 ac6:	08 95       	ret

00000ac8 <__fixunssfsi>:
 ac8:	98 d0       	rcall	.+304    	; 0xbfa <__fp_splitA>
 aca:	88 f0       	brcs	.+34     	; 0xaee <__fixunssfsi+0x26>
 acc:	9f 57       	subi	r25, 0x7F	; 127
 ace:	90 f0       	brcs	.+36     	; 0xaf4 <__fixunssfsi+0x2c>
 ad0:	b9 2f       	mov	r27, r25
 ad2:	99 27       	eor	r25, r25
 ad4:	b7 51       	subi	r27, 0x17	; 23
 ad6:	a0 f0       	brcs	.+40     	; 0xb00 <__fixunssfsi+0x38>
 ad8:	d1 f0       	breq	.+52     	; 0xb0e <__fixunssfsi+0x46>
 ada:	66 0f       	add	r22, r22
 adc:	77 1f       	adc	r23, r23
 ade:	88 1f       	adc	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	1a f0       	brmi	.+6      	; 0xaea <__fixunssfsi+0x22>
 ae4:	ba 95       	dec	r27
 ae6:	c9 f7       	brne	.-14     	; 0xada <__fixunssfsi+0x12>
 ae8:	12 c0       	rjmp	.+36     	; 0xb0e <__fixunssfsi+0x46>
 aea:	b1 30       	cpi	r27, 0x01	; 1
 aec:	81 f0       	breq	.+32     	; 0xb0e <__fixunssfsi+0x46>
 aee:	9f d0       	rcall	.+318    	; 0xc2e <__fp_zero>
 af0:	b1 e0       	ldi	r27, 0x01	; 1
 af2:	08 95       	ret
 af4:	9c c0       	rjmp	.+312    	; 0xc2e <__fp_zero>
 af6:	67 2f       	mov	r22, r23
 af8:	78 2f       	mov	r23, r24
 afa:	88 27       	eor	r24, r24
 afc:	b8 5f       	subi	r27, 0xF8	; 248
 afe:	39 f0       	breq	.+14     	; 0xb0e <__fixunssfsi+0x46>
 b00:	b9 3f       	cpi	r27, 0xF9	; 249
 b02:	cc f3       	brlt	.-14     	; 0xaf6 <__fixunssfsi+0x2e>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b3 95       	inc	r27
 b0c:	d9 f7       	brne	.-10     	; 0xb04 <__fixunssfsi+0x3c>
 b0e:	3e f4       	brtc	.+14     	; 0xb1e <__fixunssfsi+0x56>
 b10:	90 95       	com	r25
 b12:	80 95       	com	r24
 b14:	70 95       	com	r23
 b16:	61 95       	neg	r22
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	08 95       	ret

00000b20 <__floatunsisf>:
 b20:	e8 94       	clt
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <__floatsisf+0x12>

00000b24 <__floatsisf>:
 b24:	97 fb       	bst	r25, 7
 b26:	3e f4       	brtc	.+14     	; 0xb36 <__floatsisf+0x12>
 b28:	90 95       	com	r25
 b2a:	80 95       	com	r24
 b2c:	70 95       	com	r23
 b2e:	61 95       	neg	r22
 b30:	7f 4f       	sbci	r23, 0xFF	; 255
 b32:	8f 4f       	sbci	r24, 0xFF	; 255
 b34:	9f 4f       	sbci	r25, 0xFF	; 255
 b36:	99 23       	and	r25, r25
 b38:	a9 f0       	breq	.+42     	; 0xb64 <__floatsisf+0x40>
 b3a:	f9 2f       	mov	r31, r25
 b3c:	96 e9       	ldi	r25, 0x96	; 150
 b3e:	bb 27       	eor	r27, r27
 b40:	93 95       	inc	r25
 b42:	f6 95       	lsr	r31
 b44:	87 95       	ror	r24
 b46:	77 95       	ror	r23
 b48:	67 95       	ror	r22
 b4a:	b7 95       	ror	r27
 b4c:	f1 11       	cpse	r31, r1
 b4e:	f8 cf       	rjmp	.-16     	; 0xb40 <__floatsisf+0x1c>
 b50:	fa f4       	brpl	.+62     	; 0xb90 <__floatsisf+0x6c>
 b52:	bb 0f       	add	r27, r27
 b54:	11 f4       	brne	.+4      	; 0xb5a <__floatsisf+0x36>
 b56:	60 ff       	sbrs	r22, 0
 b58:	1b c0       	rjmp	.+54     	; 0xb90 <__floatsisf+0x6c>
 b5a:	6f 5f       	subi	r22, 0xFF	; 255
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	16 c0       	rjmp	.+44     	; 0xb90 <__floatsisf+0x6c>
 b64:	88 23       	and	r24, r24
 b66:	11 f0       	breq	.+4      	; 0xb6c <__floatsisf+0x48>
 b68:	96 e9       	ldi	r25, 0x96	; 150
 b6a:	11 c0       	rjmp	.+34     	; 0xb8e <__floatsisf+0x6a>
 b6c:	77 23       	and	r23, r23
 b6e:	21 f0       	breq	.+8      	; 0xb78 <__floatsisf+0x54>
 b70:	9e e8       	ldi	r25, 0x8E	; 142
 b72:	87 2f       	mov	r24, r23
 b74:	76 2f       	mov	r23, r22
 b76:	05 c0       	rjmp	.+10     	; 0xb82 <__floatsisf+0x5e>
 b78:	66 23       	and	r22, r22
 b7a:	71 f0       	breq	.+28     	; 0xb98 <__floatsisf+0x74>
 b7c:	96 e8       	ldi	r25, 0x86	; 134
 b7e:	86 2f       	mov	r24, r22
 b80:	70 e0       	ldi	r23, 0x00	; 0
 b82:	60 e0       	ldi	r22, 0x00	; 0
 b84:	2a f0       	brmi	.+10     	; 0xb90 <__floatsisf+0x6c>
 b86:	9a 95       	dec	r25
 b88:	66 0f       	add	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	da f7       	brpl	.-10     	; 0xb86 <__floatsisf+0x62>
 b90:	88 0f       	add	r24, r24
 b92:	96 95       	lsr	r25
 b94:	87 95       	ror	r24
 b96:	97 f9       	bld	r25, 7
 b98:	08 95       	ret

00000b9a <__fp_inf>:
 b9a:	97 f9       	bld	r25, 7
 b9c:	9f 67       	ori	r25, 0x7F	; 127
 b9e:	80 e8       	ldi	r24, 0x80	; 128
 ba0:	70 e0       	ldi	r23, 0x00	; 0
 ba2:	60 e0       	ldi	r22, 0x00	; 0
 ba4:	08 95       	ret

00000ba6 <__fp_nan>:
 ba6:	9f ef       	ldi	r25, 0xFF	; 255
 ba8:	80 ec       	ldi	r24, 0xC0	; 192
 baa:	08 95       	ret

00000bac <__fp_pscA>:
 bac:	00 24       	eor	r0, r0
 bae:	0a 94       	dec	r0
 bb0:	16 16       	cp	r1, r22
 bb2:	17 06       	cpc	r1, r23
 bb4:	18 06       	cpc	r1, r24
 bb6:	09 06       	cpc	r0, r25
 bb8:	08 95       	ret

00000bba <__fp_pscB>:
 bba:	00 24       	eor	r0, r0
 bbc:	0a 94       	dec	r0
 bbe:	12 16       	cp	r1, r18
 bc0:	13 06       	cpc	r1, r19
 bc2:	14 06       	cpc	r1, r20
 bc4:	05 06       	cpc	r0, r21
 bc6:	08 95       	ret

00000bc8 <__fp_round>:
 bc8:	09 2e       	mov	r0, r25
 bca:	03 94       	inc	r0
 bcc:	00 0c       	add	r0, r0
 bce:	11 f4       	brne	.+4      	; 0xbd4 <__fp_round+0xc>
 bd0:	88 23       	and	r24, r24
 bd2:	52 f0       	brmi	.+20     	; 0xbe8 <__fp_round+0x20>
 bd4:	bb 0f       	add	r27, r27
 bd6:	40 f4       	brcc	.+16     	; 0xbe8 <__fp_round+0x20>
 bd8:	bf 2b       	or	r27, r31
 bda:	11 f4       	brne	.+4      	; 0xbe0 <__fp_round+0x18>
 bdc:	60 ff       	sbrs	r22, 0
 bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__fp_round+0x20>
 be0:	6f 5f       	subi	r22, 0xFF	; 255
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	08 95       	ret

00000bea <__fp_split3>:
 bea:	57 fd       	sbrc	r21, 7
 bec:	90 58       	subi	r25, 0x80	; 128
 bee:	44 0f       	add	r20, r20
 bf0:	55 1f       	adc	r21, r21
 bf2:	59 f0       	breq	.+22     	; 0xc0a <__fp_splitA+0x10>
 bf4:	5f 3f       	cpi	r21, 0xFF	; 255
 bf6:	71 f0       	breq	.+28     	; 0xc14 <__fp_splitA+0x1a>
 bf8:	47 95       	ror	r20

00000bfa <__fp_splitA>:
 bfa:	88 0f       	add	r24, r24
 bfc:	97 fb       	bst	r25, 7
 bfe:	99 1f       	adc	r25, r25
 c00:	61 f0       	breq	.+24     	; 0xc1a <__fp_splitA+0x20>
 c02:	9f 3f       	cpi	r25, 0xFF	; 255
 c04:	79 f0       	breq	.+30     	; 0xc24 <__fp_splitA+0x2a>
 c06:	87 95       	ror	r24
 c08:	08 95       	ret
 c0a:	12 16       	cp	r1, r18
 c0c:	13 06       	cpc	r1, r19
 c0e:	14 06       	cpc	r1, r20
 c10:	55 1f       	adc	r21, r21
 c12:	f2 cf       	rjmp	.-28     	; 0xbf8 <__fp_split3+0xe>
 c14:	46 95       	lsr	r20
 c16:	f1 df       	rcall	.-30     	; 0xbfa <__fp_splitA>
 c18:	08 c0       	rjmp	.+16     	; 0xc2a <__fp_splitA+0x30>
 c1a:	16 16       	cp	r1, r22
 c1c:	17 06       	cpc	r1, r23
 c1e:	18 06       	cpc	r1, r24
 c20:	99 1f       	adc	r25, r25
 c22:	f1 cf       	rjmp	.-30     	; 0xc06 <__fp_splitA+0xc>
 c24:	86 95       	lsr	r24
 c26:	71 05       	cpc	r23, r1
 c28:	61 05       	cpc	r22, r1
 c2a:	08 94       	sec
 c2c:	08 95       	ret

00000c2e <__fp_zero>:
 c2e:	e8 94       	clt

00000c30 <__fp_szero>:
 c30:	bb 27       	eor	r27, r27
 c32:	66 27       	eor	r22, r22
 c34:	77 27       	eor	r23, r23
 c36:	cb 01       	movw	r24, r22
 c38:	97 f9       	bld	r25, 7
 c3a:	08 95       	ret

00000c3c <__mulsf3>:
 c3c:	0b d0       	rcall	.+22     	; 0xc54 <__mulsf3x>
 c3e:	c4 cf       	rjmp	.-120    	; 0xbc8 <__fp_round>
 c40:	b5 df       	rcall	.-150    	; 0xbac <__fp_pscA>
 c42:	28 f0       	brcs	.+10     	; 0xc4e <__mulsf3+0x12>
 c44:	ba df       	rcall	.-140    	; 0xbba <__fp_pscB>
 c46:	18 f0       	brcs	.+6      	; 0xc4e <__mulsf3+0x12>
 c48:	95 23       	and	r25, r21
 c4a:	09 f0       	breq	.+2      	; 0xc4e <__mulsf3+0x12>
 c4c:	a6 cf       	rjmp	.-180    	; 0xb9a <__fp_inf>
 c4e:	ab cf       	rjmp	.-170    	; 0xba6 <__fp_nan>
 c50:	11 24       	eor	r1, r1
 c52:	ee cf       	rjmp	.-36     	; 0xc30 <__fp_szero>

00000c54 <__mulsf3x>:
 c54:	ca df       	rcall	.-108    	; 0xbea <__fp_split3>
 c56:	a0 f3       	brcs	.-24     	; 0xc40 <__mulsf3+0x4>

00000c58 <__mulsf3_pse>:
 c58:	95 9f       	mul	r25, r21
 c5a:	d1 f3       	breq	.-12     	; 0xc50 <__mulsf3+0x14>
 c5c:	95 0f       	add	r25, r21
 c5e:	50 e0       	ldi	r21, 0x00	; 0
 c60:	55 1f       	adc	r21, r21
 c62:	62 9f       	mul	r22, r18
 c64:	f0 01       	movw	r30, r0
 c66:	72 9f       	mul	r23, r18
 c68:	bb 27       	eor	r27, r27
 c6a:	f0 0d       	add	r31, r0
 c6c:	b1 1d       	adc	r27, r1
 c6e:	63 9f       	mul	r22, r19
 c70:	aa 27       	eor	r26, r26
 c72:	f0 0d       	add	r31, r0
 c74:	b1 1d       	adc	r27, r1
 c76:	aa 1f       	adc	r26, r26
 c78:	64 9f       	mul	r22, r20
 c7a:	66 27       	eor	r22, r22
 c7c:	b0 0d       	add	r27, r0
 c7e:	a1 1d       	adc	r26, r1
 c80:	66 1f       	adc	r22, r22
 c82:	82 9f       	mul	r24, r18
 c84:	22 27       	eor	r18, r18
 c86:	b0 0d       	add	r27, r0
 c88:	a1 1d       	adc	r26, r1
 c8a:	62 1f       	adc	r22, r18
 c8c:	73 9f       	mul	r23, r19
 c8e:	b0 0d       	add	r27, r0
 c90:	a1 1d       	adc	r26, r1
 c92:	62 1f       	adc	r22, r18
 c94:	83 9f       	mul	r24, r19
 c96:	a0 0d       	add	r26, r0
 c98:	61 1d       	adc	r22, r1
 c9a:	22 1f       	adc	r18, r18
 c9c:	74 9f       	mul	r23, r20
 c9e:	33 27       	eor	r19, r19
 ca0:	a0 0d       	add	r26, r0
 ca2:	61 1d       	adc	r22, r1
 ca4:	23 1f       	adc	r18, r19
 ca6:	84 9f       	mul	r24, r20
 ca8:	60 0d       	add	r22, r0
 caa:	21 1d       	adc	r18, r1
 cac:	82 2f       	mov	r24, r18
 cae:	76 2f       	mov	r23, r22
 cb0:	6a 2f       	mov	r22, r26
 cb2:	11 24       	eor	r1, r1
 cb4:	9f 57       	subi	r25, 0x7F	; 127
 cb6:	50 40       	sbci	r21, 0x00	; 0
 cb8:	8a f0       	brmi	.+34     	; 0xcdc <__mulsf3_pse+0x84>
 cba:	e1 f0       	breq	.+56     	; 0xcf4 <__mulsf3_pse+0x9c>
 cbc:	88 23       	and	r24, r24
 cbe:	4a f0       	brmi	.+18     	; 0xcd2 <__mulsf3_pse+0x7a>
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	bb 1f       	adc	r27, r27
 cc6:	66 1f       	adc	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	91 50       	subi	r25, 0x01	; 1
 cce:	50 40       	sbci	r21, 0x00	; 0
 cd0:	a9 f7       	brne	.-22     	; 0xcbc <__mulsf3_pse+0x64>
 cd2:	9e 3f       	cpi	r25, 0xFE	; 254
 cd4:	51 05       	cpc	r21, r1
 cd6:	70 f0       	brcs	.+28     	; 0xcf4 <__mulsf3_pse+0x9c>
 cd8:	60 cf       	rjmp	.-320    	; 0xb9a <__fp_inf>
 cda:	aa cf       	rjmp	.-172    	; 0xc30 <__fp_szero>
 cdc:	5f 3f       	cpi	r21, 0xFF	; 255
 cde:	ec f3       	brlt	.-6      	; 0xcda <__mulsf3_pse+0x82>
 ce0:	98 3e       	cpi	r25, 0xE8	; 232
 ce2:	dc f3       	brlt	.-10     	; 0xcda <__mulsf3_pse+0x82>
 ce4:	86 95       	lsr	r24
 ce6:	77 95       	ror	r23
 ce8:	67 95       	ror	r22
 cea:	b7 95       	ror	r27
 cec:	f7 95       	ror	r31
 cee:	e7 95       	ror	r30
 cf0:	9f 5f       	subi	r25, 0xFF	; 255
 cf2:	c1 f7       	brne	.-16     	; 0xce4 <__mulsf3_pse+0x8c>
 cf4:	fe 2b       	or	r31, r30
 cf6:	88 0f       	add	r24, r24
 cf8:	91 1d       	adc	r25, r1
 cfa:	96 95       	lsr	r25
 cfc:	87 95       	ror	r24
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__divmodhi4>:
 d02:	97 fb       	bst	r25, 7
 d04:	07 2e       	mov	r0, r23
 d06:	16 f4       	brtc	.+4      	; 0xd0c <__divmodhi4+0xa>
 d08:	00 94       	com	r0
 d0a:	06 d0       	rcall	.+12     	; 0xd18 <__divmodhi4_neg1>
 d0c:	77 fd       	sbrc	r23, 7
 d0e:	08 d0       	rcall	.+16     	; 0xd20 <__divmodhi4_neg2>
 d10:	36 d0       	rcall	.+108    	; 0xd7e <__udivmodhi4>
 d12:	07 fc       	sbrc	r0, 7
 d14:	05 d0       	rcall	.+10     	; 0xd20 <__divmodhi4_neg2>
 d16:	3e f4       	brtc	.+14     	; 0xd26 <__divmodhi4_exit>

00000d18 <__divmodhi4_neg1>:
 d18:	90 95       	com	r25
 d1a:	81 95       	neg	r24
 d1c:	9f 4f       	sbci	r25, 0xFF	; 255
 d1e:	08 95       	ret

00000d20 <__divmodhi4_neg2>:
 d20:	70 95       	com	r23
 d22:	61 95       	neg	r22
 d24:	7f 4f       	sbci	r23, 0xFF	; 255

00000d26 <__divmodhi4_exit>:
 d26:	08 95       	ret

00000d28 <__divmodsi4>:
 d28:	05 2e       	mov	r0, r21
 d2a:	97 fb       	bst	r25, 7
 d2c:	16 f4       	brtc	.+4      	; 0xd32 <__divmodsi4+0xa>
 d2e:	00 94       	com	r0
 d30:	0f d0       	rcall	.+30     	; 0xd50 <__negsi2>
 d32:	57 fd       	sbrc	r21, 7
 d34:	05 d0       	rcall	.+10     	; 0xd40 <__divmodsi4_neg2>
 d36:	37 d0       	rcall	.+110    	; 0xda6 <__udivmodsi4>
 d38:	07 fc       	sbrc	r0, 7
 d3a:	02 d0       	rcall	.+4      	; 0xd40 <__divmodsi4_neg2>
 d3c:	46 f4       	brtc	.+16     	; 0xd4e <__divmodsi4_exit>
 d3e:	08 c0       	rjmp	.+16     	; 0xd50 <__negsi2>

00000d40 <__divmodsi4_neg2>:
 d40:	50 95       	com	r21
 d42:	40 95       	com	r20
 d44:	30 95       	com	r19
 d46:	21 95       	neg	r18
 d48:	3f 4f       	sbci	r19, 0xFF	; 255
 d4a:	4f 4f       	sbci	r20, 0xFF	; 255
 d4c:	5f 4f       	sbci	r21, 0xFF	; 255

00000d4e <__divmodsi4_exit>:
 d4e:	08 95       	ret

00000d50 <__negsi2>:
 d50:	90 95       	com	r25
 d52:	80 95       	com	r24
 d54:	70 95       	com	r23
 d56:	61 95       	neg	r22
 d58:	7f 4f       	sbci	r23, 0xFF	; 255
 d5a:	8f 4f       	sbci	r24, 0xFF	; 255
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	08 95       	ret

00000d60 <__umulhisi3>:
 d60:	a2 9f       	mul	r26, r18
 d62:	b0 01       	movw	r22, r0
 d64:	b3 9f       	mul	r27, r19
 d66:	c0 01       	movw	r24, r0
 d68:	a3 9f       	mul	r26, r19
 d6a:	70 0d       	add	r23, r0
 d6c:	81 1d       	adc	r24, r1
 d6e:	11 24       	eor	r1, r1
 d70:	91 1d       	adc	r25, r1
 d72:	b2 9f       	mul	r27, r18
 d74:	70 0d       	add	r23, r0
 d76:	81 1d       	adc	r24, r1
 d78:	11 24       	eor	r1, r1
 d7a:	91 1d       	adc	r25, r1
 d7c:	08 95       	ret

00000d7e <__udivmodhi4>:
 d7e:	aa 1b       	sub	r26, r26
 d80:	bb 1b       	sub	r27, r27
 d82:	51 e1       	ldi	r21, 0x11	; 17
 d84:	07 c0       	rjmp	.+14     	; 0xd94 <__udivmodhi4_ep>

00000d86 <__udivmodhi4_loop>:
 d86:	aa 1f       	adc	r26, r26
 d88:	bb 1f       	adc	r27, r27
 d8a:	a6 17       	cp	r26, r22
 d8c:	b7 07       	cpc	r27, r23
 d8e:	10 f0       	brcs	.+4      	; 0xd94 <__udivmodhi4_ep>
 d90:	a6 1b       	sub	r26, r22
 d92:	b7 0b       	sbc	r27, r23

00000d94 <__udivmodhi4_ep>:
 d94:	88 1f       	adc	r24, r24
 d96:	99 1f       	adc	r25, r25
 d98:	5a 95       	dec	r21
 d9a:	a9 f7       	brne	.-22     	; 0xd86 <__udivmodhi4_loop>
 d9c:	80 95       	com	r24
 d9e:	90 95       	com	r25
 da0:	bc 01       	movw	r22, r24
 da2:	cd 01       	movw	r24, r26
 da4:	08 95       	ret

00000da6 <__udivmodsi4>:
 da6:	a1 e2       	ldi	r26, 0x21	; 33
 da8:	1a 2e       	mov	r1, r26
 daa:	aa 1b       	sub	r26, r26
 dac:	bb 1b       	sub	r27, r27
 dae:	fd 01       	movw	r30, r26
 db0:	0d c0       	rjmp	.+26     	; 0xdcc <__udivmodsi4_ep>

00000db2 <__udivmodsi4_loop>:
 db2:	aa 1f       	adc	r26, r26
 db4:	bb 1f       	adc	r27, r27
 db6:	ee 1f       	adc	r30, r30
 db8:	ff 1f       	adc	r31, r31
 dba:	a2 17       	cp	r26, r18
 dbc:	b3 07       	cpc	r27, r19
 dbe:	e4 07       	cpc	r30, r20
 dc0:	f5 07       	cpc	r31, r21
 dc2:	20 f0       	brcs	.+8      	; 0xdcc <__udivmodsi4_ep>
 dc4:	a2 1b       	sub	r26, r18
 dc6:	b3 0b       	sbc	r27, r19
 dc8:	e4 0b       	sbc	r30, r20
 dca:	f5 0b       	sbc	r31, r21

00000dcc <__udivmodsi4_ep>:
 dcc:	66 1f       	adc	r22, r22
 dce:	77 1f       	adc	r23, r23
 dd0:	88 1f       	adc	r24, r24
 dd2:	99 1f       	adc	r25, r25
 dd4:	1a 94       	dec	r1
 dd6:	69 f7       	brne	.-38     	; 0xdb2 <__udivmodsi4_loop>
 dd8:	60 95       	com	r22
 dda:	70 95       	com	r23
 ddc:	80 95       	com	r24
 dde:	90 95       	com	r25
 de0:	9b 01       	movw	r18, r22
 de2:	ac 01       	movw	r20, r24
 de4:	bd 01       	movw	r22, r26
 de6:	cf 01       	movw	r24, r30
 de8:	08 95       	ret

00000dea <memset>:
 dea:	dc 01       	movw	r26, r24
 dec:	01 c0       	rjmp	.+2      	; 0xdf0 <memset+0x6>
 dee:	6d 93       	st	X+, r22
 df0:	41 50       	subi	r20, 0x01	; 1
 df2:	50 40       	sbci	r21, 0x00	; 0
 df4:	e0 f7       	brcc	.-8      	; 0xdee <memset+0x4>
 df6:	08 95       	ret

00000df8 <strcpy>:
 df8:	fb 01       	movw	r30, r22
 dfa:	dc 01       	movw	r26, r24
 dfc:	01 90       	ld	r0, Z+
 dfe:	0d 92       	st	X+, r0
 e00:	00 20       	and	r0, r0
 e02:	e1 f7       	brne	.-8      	; 0xdfc <strcpy+0x4>
 e04:	08 95       	ret

00000e06 <__itoa_ncheck>:
 e06:	bb 27       	eor	r27, r27
 e08:	4a 30       	cpi	r20, 0x0A	; 10
 e0a:	31 f4       	brne	.+12     	; 0xe18 <__itoa_ncheck+0x12>
 e0c:	99 23       	and	r25, r25
 e0e:	22 f4       	brpl	.+8      	; 0xe18 <__itoa_ncheck+0x12>
 e10:	bd e2       	ldi	r27, 0x2D	; 45
 e12:	90 95       	com	r25
 e14:	81 95       	neg	r24
 e16:	9f 4f       	sbci	r25, 0xFF	; 255
 e18:	01 c0       	rjmp	.+2      	; 0xe1c <__utoa_common>

00000e1a <__utoa_ncheck>:
 e1a:	bb 27       	eor	r27, r27

00000e1c <__utoa_common>:
 e1c:	fb 01       	movw	r30, r22
 e1e:	55 27       	eor	r21, r21
 e20:	aa 27       	eor	r26, r26
 e22:	88 0f       	add	r24, r24
 e24:	99 1f       	adc	r25, r25
 e26:	aa 1f       	adc	r26, r26
 e28:	a4 17       	cp	r26, r20
 e2a:	10 f0       	brcs	.+4      	; 0xe30 <__utoa_common+0x14>
 e2c:	a4 1b       	sub	r26, r20
 e2e:	83 95       	inc	r24
 e30:	50 51       	subi	r21, 0x10	; 16
 e32:	b9 f7       	brne	.-18     	; 0xe22 <__utoa_common+0x6>
 e34:	a0 5d       	subi	r26, 0xD0	; 208
 e36:	aa 33       	cpi	r26, 0x3A	; 58
 e38:	08 f0       	brcs	.+2      	; 0xe3c <__utoa_common+0x20>
 e3a:	a9 5d       	subi	r26, 0xD9	; 217
 e3c:	a1 93       	st	Z+, r26
 e3e:	00 97       	sbiw	r24, 0x00	; 0
 e40:	79 f7       	brne	.-34     	; 0xe20 <__utoa_common+0x4>
 e42:	b1 11       	cpse	r27, r1
 e44:	b1 93       	st	Z+, r27
 e46:	11 92       	st	Z+, r1
 e48:	cb 01       	movw	r24, r22
 e4a:	00 c0       	rjmp	.+0      	; 0xe4c <strrev>

00000e4c <strrev>:
 e4c:	dc 01       	movw	r26, r24
 e4e:	fc 01       	movw	r30, r24
 e50:	67 2f       	mov	r22, r23
 e52:	71 91       	ld	r23, Z+
 e54:	77 23       	and	r23, r23
 e56:	e1 f7       	brne	.-8      	; 0xe50 <strrev+0x4>
 e58:	32 97       	sbiw	r30, 0x02	; 2
 e5a:	04 c0       	rjmp	.+8      	; 0xe64 <strrev+0x18>
 e5c:	7c 91       	ld	r23, X
 e5e:	6d 93       	st	X+, r22
 e60:	70 83       	st	Z, r23
 e62:	62 91       	ld	r22, -Z
 e64:	ae 17       	cp	r26, r30
 e66:	bf 07       	cpc	r27, r31
 e68:	c8 f3       	brcs	.-14     	; 0xe5c <strrev+0x10>
 e6a:	08 95       	ret

00000e6c <_exit>:
 e6c:	f8 94       	cli

00000e6e <__stop_program>:
 e6e:	ff cf       	rjmp	.-2      	; 0xe6e <__stop_program>
